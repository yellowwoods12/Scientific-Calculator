{"ast":null,"code":"import _toConsumableArray from \"/home/sadaif/Documents/React-App/redux-app/scientific/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { DIGIT_PRESSED, OPERATION_PRESSED, CLEAR } from '../constants';\nimport evaluateSolution from './evaluateSolution';\nvar initialState = {\n  inputHistory: [],\n  lastOperation: \"\",\n  solutionDisplayValue: \"0\"\n}; // This function mutates the copy of the old state. So there \n// cannot be any side effects to doing this\n\nfunction parseNewDigit(oldState, number) {\n  var lastTyped = parseInt(oldState.inputHistory[oldState.inputHistory.length - 1]);\n\n  if (isNaN(lastTyped) !== true) {\n    oldState.inputHistory[oldState.inputHistory.length - 1] += number;\n  } else {\n    oldState.inputHistory.push(number);\n  }\n\n  oldState.solutionDisplayValue = oldState.inputHistory[oldState.inputHistory.length - 1];\n  return oldState;\n}\n\nfunction parseNewOperation(oldState, operation) {\n  if (oldState.lastOperation === \"\") {\n    oldState.inputHistory.push(operation);\n    oldState.lastOperation = operation;\n    return oldState;\n  } else if (oldState.inputHistory.length === 5) {\n    var result = evaluateSolution.apply(void 0, _toConsumableArray(oldState.inputHistory.slice(2)));\n    oldState.solutionDisplayValue = evaluateSolution.apply(void 0, _toConsumableArray(oldState.inputHistory.slice(0, 2)).concat([result]));\n\n    if (operation === '=') {\n      oldState.inputHistory = [oldState.solutionDisplayValue];\n      oldState.lastOperation = \"\";\n    } else {\n      oldState.inputHistory = [oldState.solutionDisplayValue, operation];\n      oldState.lastOperation = operation;\n    }\n\n    return oldState;\n  } else if (operation === '=') {\n    oldState.solutionDisplayValue = evaluateSolution.apply(void 0, _toConsumableArray(oldState.inputHistory));\n    oldState.inputHistory = [oldState.solutionDisplayValue];\n    oldState.lastOperation = \"\";\n    return oldState;\n  } else if (operation === \"+\") {\n    oldState.solutionDisplayValue = evaluateSolution.apply(void 0, _toConsumableArray(oldState.inputHistory));\n    console.log(oldState.solutionDisplayValue);\n    oldState.inputHistory = [oldState.solutionDisplayValue, '+'];\n    oldState.lastOperation = \"+\";\n    return oldState;\n  } else if (operation === '-') {\n    oldState.solutionDisplayValue = evaluateSolution.apply(void 0, _toConsumableArray(oldState.inputHistory));\n    console.log(oldState.solutionDisplayValue);\n    oldState.inputHistory = [oldState.solutionDisplayValue, '-'];\n    oldState.lastOperation = \"-\";\n    return oldState;\n  } else if (oldState.lastOperation === \"tan\") {\n    oldState.inputHistory.push(operation);\n    oldState.lastOperation = operation;\n    return oldState;\n  } else if (operation === 'sin') {\n    oldState.solutionDisplayValue = evaluateSolution.apply(void 0, _toConsumableArray(oldState.inputHistory));\n    console.log(oldState.solutionDisplayValue);\n    oldState.inputHistory = [oldState.solutionDisplayValue, 'sin'];\n    oldState.lastOperation = \"sin\";\n    return oldState;\n  } else if (operation === 'cos') {\n    oldState.solutionDisplayValue = evaluateSolution.apply(void 0, _toConsumableArray(oldState.inputHistory));\n    console.log(oldState.solutionDisplayValue);\n    oldState.inputHistory = [oldState.solutionDisplayValue, 'cos'];\n    oldState.lastOperation = \"cos\";\n    return oldState;\n  } else if (operation === 'Log') {\n    oldState.solutionDisplayValue = evaluateSolution.apply(void 0, _toConsumableArray(oldState.inputHistory));\n    console.log(oldState.solutionDisplayValue);\n    oldState.inputHistory = [oldState.solutionDisplayValue, 'Log'];\n    oldState.lastOperation = \"Log\";\n    return oldState;\n  } else if (operation === '%') {\n    oldState.solutionDisplayValue = evaluateSolution.apply(void 0, _toConsumableArray(oldState.inputHistory));\n    console.log(oldState.solutionDisplayValue);\n    oldState.inputHistory = [oldState.solutionDisplayValue, '%'];\n    oldState.lastOperation = \"%\";\n    return oldState;\n  } else if (operation === '√') {\n    oldState.solutionDisplayValue = evaluateSolution.apply(void 0, _toConsumableArray(oldState.inputHistory));\n    console.log(oldState.solutionDisplayValue);\n    oldState.inputHistory = [oldState.solutionDisplayValue, '√'];\n    oldState.lastOperation = \"√\";\n    return oldState;\n  } else if (operation === 'Exp') {\n    oldState.solutionDisplayValue = evaluateSolution.apply(void 0, _toConsumableArray(oldState.inputHistory));\n    console.log(oldState.solutionDisplayValue);\n    oldState.inputHistory = [oldState.solutionDisplayValue, 'Exp'];\n    oldState.lastOperation = \"Exp\";\n    return oldState;\n  } else if (operation === 'x') {\n    if (oldState.lastOperation === '+' || oldState.lastOperation === '-') {\n      oldState.inputHistory.push(operation);\n      oldState.lastOperation = operation;\n      return oldState;\n    } else {\n      oldState.solutionDisplayValue = evaluateSolution.apply(void 0, _toConsumableArray(oldState.inputHistory));\n      oldState.inputHistory = [oldState.solutionDisplayValue, 'x'];\n      oldState.lastOperation = \"x\";\n      console.log(oldState.solutionDisplayValue);\n      return oldState;\n    }\n  } else if (operation === '÷') {\n    if (oldState.lastOperation === '+' || oldState.lastOperation === '-') {\n      oldState.inputHistory.push(operation);\n      oldState.lastOperation = operation;\n      return oldState;\n    } else {\n      oldState.solutionDisplayValue = evaluateSolution.apply(void 0, _toConsumableArray(oldState.inputHistory));\n      oldState.inputHistory = [oldState.solutionDisplayValue, '÷'];\n      oldState.lastOperation = \"÷\";\n      return oldState;\n    }\n  }\n}\n\nexport default function SolutionReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState;\n\n  switch (action.type) {\n    case DIGIT_PRESSED:\n      newState = JSON.parse(JSON.stringify(state));\n      newState = parseNewDigit(newState, action.event);\n      return newState;\n\n    case OPERATION_PRESSED:\n      newState = JSON.parse(JSON.stringify(state));\n      newState = parseNewOperation(newState, action.event);\n      return newState;\n\n    case CLEAR:\n      return initialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/sadaif/Documents/React-App/redux-app/scientific/src/reducers/SolutionReducer.js"],"names":["DIGIT_PRESSED","OPERATION_PRESSED","CLEAR","evaluateSolution","initialState","inputHistory","lastOperation","solutionDisplayValue","parseNewDigit","oldState","number","lastTyped","parseInt","length","isNaN","push","parseNewOperation","operation","result","slice","console","log","SolutionReducer","state","action","newState","type","JSON","parse","stringify","event"],"mappings":"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","sourcesContent":["import { DIGIT_PRESSED, OPERATION_PRESSED, CLEAR } from '../constants'\nimport evaluateSolution from './evaluateSolution'\n\nconst initialState = {\n    inputHistory: [],\n    lastOperation: \"\",\n    solutionDisplayValue: \"0\"\n};\n\n// This function mutates the copy of the old state. So there \n// cannot be any side effects to doing this\nfunction parseNewDigit(oldState, number) {\n    let lastTyped = parseInt(oldState.inputHistory[oldState.inputHistory.length - 1])\n    if (isNaN(lastTyped) !== true) {\n        oldState.inputHistory[oldState.inputHistory.length - 1] += number\n    }\n    else {\n        oldState.inputHistory.push(number);\n    }\n    oldState.solutionDisplayValue = oldState.inputHistory[oldState.inputHistory.length - 1]\n    return oldState\n}\n\nfunction parseNewOperation(oldState, operation) {\n    if (oldState.lastOperation === \"\") {\n        oldState.inputHistory.push(operation);\n        oldState.lastOperation = operation;\n        return oldState;\n    }\n    else if(oldState.inputHistory.length === 5){\n        let result = evaluateSolution(...oldState.inputHistory.slice(2));\n        oldState.solutionDisplayValue = evaluateSolution(...oldState.inputHistory.slice(0,2),result);\n        if(operation === '='){\n            oldState.inputHistory = [oldState.solutionDisplayValue];\n            oldState.lastOperation = \"\";\n        }\n        else{\n            oldState.inputHistory = [oldState.solutionDisplayValue, operation];\n            oldState.lastOperation = operation;\n        }\n        return oldState;\n    }\n    else if (operation === '='){\n        oldState.solutionDisplayValue = evaluateSolution(...oldState.inputHistory);\n        oldState.inputHistory = [oldState.solutionDisplayValue];\n        oldState.lastOperation = \"\";\n        return oldState;\n    }\n    else if (operation === \"+\") {\n        oldState.solutionDisplayValue = evaluateSolution(...oldState.inputHistory);\n        console.log(oldState.solutionDisplayValue)\n        oldState.inputHistory = [oldState.solutionDisplayValue, '+']\n        oldState.lastOperation = \"+\"\n        return oldState;        \n    }\n    else if(operation === '-'){\n        oldState.solutionDisplayValue = evaluateSolution(...oldState.inputHistory);\n        console.log(oldState.solutionDisplayValue)\n        oldState.inputHistory = [oldState.solutionDisplayValue, '-']\n        oldState.lastOperation = \"-\"\n        return oldState; \n    }\n    else if (oldState.lastOperation === \"tan\") {\n        oldState.inputHistory.push(operation);\n        oldState.lastOperation = operation;\n        return oldState;\n    }\n    else if(operation === 'sin'){\n        oldState.solutionDisplayValue = evaluateSolution(...oldState.inputHistory);\n        console.log(oldState.solutionDisplayValue)\n        oldState.inputHistory = [oldState.solutionDisplayValue, 'sin']\n        oldState.lastOperation = \"sin\"\n        return oldState; \n    }\n    else if(operation === 'cos'){\n        oldState.solutionDisplayValue = evaluateSolution(...oldState.inputHistory);\n        console.log(oldState.solutionDisplayValue)\n        oldState.inputHistory = [oldState.solutionDisplayValue, 'cos']\n        oldState.lastOperation = \"cos\"\n        return oldState; \n    }\n    else if(operation === 'Log'){\n        oldState.solutionDisplayValue = evaluateSolution(...oldState.inputHistory);\n        console.log(oldState.solutionDisplayValue)\n        oldState.inputHistory = [oldState.solutionDisplayValue, 'Log']\n        oldState.lastOperation = \"Log\"\n        return oldState; \n    }\n    else if(operation === '%'){\n        oldState.solutionDisplayValue = evaluateSolution(...oldState.inputHistory);\n        console.log(oldState.solutionDisplayValue)\n        oldState.inputHistory = [oldState.solutionDisplayValue, '%']\n        oldState.lastOperation = \"%\"\n        return oldState; \n    }\n    else if(operation === '√'){\n        oldState.solutionDisplayValue = evaluateSolution(...oldState.inputHistory);\n        console.log(oldState.solutionDisplayValue)\n        oldState.inputHistory = [oldState.solutionDisplayValue, '√']\n        oldState.lastOperation = \"√\"\n        return oldState; \n    }\n    else if(operation === 'Exp'){\n        oldState.solutionDisplayValue = evaluateSolution(...oldState.inputHistory);\n        console.log(oldState.solutionDisplayValue)\n        oldState.inputHistory = [oldState.solutionDisplayValue, 'Exp']\n        oldState.lastOperation = \"Exp\"\n        return oldState; \n    }\n    else if(operation === 'x'){\n        if(oldState.lastOperation === '+' || oldState.lastOperation === '-'){\n            oldState.inputHistory.push(operation);\n            oldState.lastOperation = operation;\n            return oldState;\n        }\n        else{\n            oldState.solutionDisplayValue = evaluateSolution(...oldState.inputHistory);\n            oldState.inputHistory = [oldState.solutionDisplayValue, 'x']\n            oldState.lastOperation = \"x\"\n            console.log(oldState.solutionDisplayValue)\n            return oldState; \n        }\n    } \n   \n    \n    else if(operation === '÷'){\n        if(oldState.lastOperation === '+' || oldState.lastOperation === '-'){\n            oldState.inputHistory.push(operation);\n            oldState.lastOperation = operation;\n            return oldState;\n        }\n        else{\n            oldState.solutionDisplayValue = evaluateSolution(...oldState.inputHistory);\n            oldState.inputHistory = [oldState.solutionDisplayValue, '÷']\n            oldState.lastOperation = \"÷\"\n            return oldState; \n        }\n    }\n}\n\nexport default function SolutionReducer(state = initialState, action) {\n    var newState\n    switch (action.type) {\n        case DIGIT_PRESSED:\n            newState = JSON.parse(JSON.stringify(state));\n            newState = parseNewDigit(newState, action.event)\n            return newState;\n        case OPERATION_PRESSED:\n            newState = JSON.parse(JSON.stringify(state));\n            newState = parseNewOperation(newState,action.event);\n            return newState;\n        case CLEAR:\n            return initialState;\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}