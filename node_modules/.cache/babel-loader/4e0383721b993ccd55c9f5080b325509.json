{"ast":null,"code":"import _objectSpread from \"/home/sadaif/Documents/React-App/redux-app/scientific/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/sadaif/Documents/React-App/redux-app/scientific/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { DIGIT_PRESSED, OPERATION_PRESSED, CLEAR } from '../constants';\nimport evaluateSolution from './evaluateSolution';\nvar initialState = {\n  inputHistory: [],\n  lastOperation: \"\",\n  solutionDisplayValue: \"0\"\n}; // This function mutates the copy of the old state. So there \n// cannot be any side effects to doing this\n\nfunction parseNewDigit(oldState, number) {\n  var lastTyped = parseInt(oldState.inputHistory[oldState.inputHistory.length - 1]);\n\n  if (isNaN(lastTyped) !== true) {\n    oldState.inputHistory[oldState.inputHistory.length - 1] += number;\n  } else {\n    oldState.inputHistory.push(number);\n  }\n\n  oldState.solutionDisplayValue = oldState.inputHistory[oldState.inputHistory.length - 1];\n  return oldState;\n}\n\nfunction parseNewOperation(oldState, operation) {\n  if (oldState.lastOperation === \"\") {\n    oldState.inputHistory.push(operation);\n    oldState.lastOperation = operation;\n    return oldState;\n  } else if (operation === '=') {\n    oldState.solutionDisplayValue = evaluateSolution.apply(void 0, _toConsumableArray(oldState.inputHistory));\n    oldState.inputHistory = [oldState.solutionDisplayValue];\n    oldState.lastOperation = \"\";\n    return oldState;\n  } else if (operation === \"+\") {\n    return _objectSpread({}, evaluateSolution(oldState.inputHistory), {\n      inputHistory: 0,\n      lastOperation: oldState.lastOperation + oldState.inputHistory,\n      solutionDisplayValue: ''\n    });\n  } else if (operation === \"-\") {\n    return _objectSpread({}, evaluateSolution(oldState.inputHistory), {\n      inputHistory: 0,\n      lastOperation: oldState.lastOperation + oldState.inputHistory,\n      solutionDisplayValue: ''\n    });\n  } else if (operation === \"tan\") {\n    return _objectSpread({}, evaluateSolution(oldState.inputHistory), {\n      inputHistory: 0,\n      lastOperation: oldState.lastOperation + oldState.inputHistory,\n      solutionDisplayValue: ''\n    });\n  } else if (operation === \"sin\") {\n    return _objectSpread({}, evaluateSolution(oldState.inputHistory), {\n      inputHistory: 0,\n      lastOperation: oldState.lastOperation + oldState.inputHistory,\n      solutionDisplayValue: ''\n    });\n  } else if (operation === \"cos\") {\n    return _objectSpread({}, evaluateSolution(oldState.inputHistory), {\n      inputHistory: 0,\n      lastOperation: oldState.lastOperation + oldState.inputHistory,\n      solutionDisplayValue: ''\n    });\n  } else if (operation === \"Log\") {\n    return _objectSpread({}, evaluateSolution(oldState.inputHistory), {\n      inputHistory: 0,\n      lastOperation: oldState.lastOperation + oldState.inputHistory,\n      solutionDisplayValue: ''\n    });\n  } else if (operation === \"%\") {\n    return _objectSpread({}, evaluateSolution(oldState.inputHistory), {\n      inputHistory: 0,\n      lastOperation: oldState.lastOperation + oldState.inputHistory,\n      solutionDisplayValue: ''\n    });\n  } else if (operation === \"√\") {\n    return _objectSpread({}, evaluateSolution(oldState.inputHistory), {\n      inputHistory: 0,\n      lastOperation: oldState.lastOperation + oldState.inputHistory,\n      solutionDisplayValue: ''\n    });\n  } else if (operation === \"Exp\") {\n    return _objectSpread({}, evaluateSolution(oldState.inputHistory), {\n      inputHistory: 0,\n      lastOperation: oldState.lastOperation + oldState.inputHistory,\n      solutionDisplayValue: ''\n    });\n  } else if (operation === \"x\") {\n    return _objectSpread({}, evaluateSolution(oldState.inputHistory), {\n      inputHistory: 0,\n      lastOperation: oldState.lastOperation + oldState.inputHistory,\n      solutionDisplayValue: ''\n    });\n  } else if (operation === \"÷\") {\n    return _objectSpread({}, evaluateSolution(oldState.inputHistory), {\n      inputHistory: 0,\n      lastOperation: oldState.lastOperation + oldState.inputHistory,\n      solutionDisplayValue: ''\n    });\n  }\n}\n\nexport default function SolutionReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState;\n\n  switch (action.type) {\n    case DIGIT_PRESSED:\n      newState = JSON.parse(JSON.stringify(state));\n      newState = parseNewDigit(newState, action.event);\n      return newState;\n\n    case OPERATION_PRESSED:\n      newState = JSON.parse(JSON.stringify(state));\n      newState = parseNewOperation(newState, action.event);\n      return newState;\n\n    case CLEAR:\n      return initialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/sadaif/Documents/React-App/redux-app/scientific/src/reducers/SolutionReducer.js"],"names":["DIGIT_PRESSED","OPERATION_PRESSED","CLEAR","evaluateSolution","initialState","inputHistory","lastOperation","solutionDisplayValue","parseNewDigit","oldState","number","lastTyped","parseInt","length","isNaN","push","parseNewOperation","operation","SolutionReducer","state","action","newState","type","JSON","parse","stringify","event"],"mappings":"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","sourcesContent":["import { DIGIT_PRESSED, OPERATION_PRESSED, CLEAR } from '../constants'\nimport evaluateSolution from './evaluateSolution'\n\nconst initialState = {\n    inputHistory: [],\n    lastOperation: \"\",\n    solutionDisplayValue: \"0\"\n};\n\n// This function mutates the copy of the old state. So there \n// cannot be any side effects to doing this\nfunction parseNewDigit(oldState, number) {\n    let lastTyped = parseInt(oldState.inputHistory[oldState.inputHistory.length - 1])\n    if (isNaN(lastTyped) !== true) {\n        oldState.inputHistory[oldState.inputHistory.length - 1] += number\n    }\n    else {\n        oldState.inputHistory.push(number);\n    }\n    oldState.solutionDisplayValue = oldState.inputHistory[oldState.inputHistory.length - 1]\n    return oldState\n}\n\nfunction parseNewOperation(oldState, operation) {\n    if (oldState.lastOperation === \"\") {\n        oldState.inputHistory.push(operation);\n        oldState.lastOperation = operation;\n        return oldState;\n    }\n     \n    else if (operation === '='){\n        oldState.solutionDisplayValue = evaluateSolution(...oldState.inputHistory);\n        oldState.inputHistory = [oldState.solutionDisplayValue];\n        oldState.lastOperation = \"\";\n        return oldState;\n    }\n    else if (operation === \"+\") {\n        return {\n            ...evaluateSolution(oldState.inputHistory),\n            inputHistory: 0,\n            lastOperation: oldState.lastOperation + oldState.inputHistory,\n            solutionDisplayValue: '',\n          };\n    }\n    else if (operation === \"-\") {\n        return {\n            ...evaluateSolution(oldState.inputHistory),\n            inputHistory: 0,\n            lastOperation: oldState.lastOperation + oldState.inputHistory,\n            solutionDisplayValue: '',\n          };\n    }\n    else if (operation === \"tan\") {\n        return {\n            ...evaluateSolution(oldState.inputHistory),\n            inputHistory: 0,\n            lastOperation: oldState.lastOperation + oldState.inputHistory,\n            solutionDisplayValue: '',\n          };\n    }\n    else if (operation === \"sin\") {\n        return {\n            ...evaluateSolution(oldState.inputHistory),\n            inputHistory: 0,\n            lastOperation: oldState.lastOperation + oldState.inputHistory,\n            solutionDisplayValue: '',\n          };\n    }\n    else if (operation === \"cos\") {\n        return {\n            ...evaluateSolution(oldState.inputHistory),\n            inputHistory: 0,\n            lastOperation: oldState.lastOperation + oldState.inputHistory,\n            solutionDisplayValue: '',\n          };\n    }\n    else if (operation === \"Log\") {\n        return {\n            ...evaluateSolution(oldState.inputHistory),\n            inputHistory: 0,\n            lastOperation: oldState.lastOperation + oldState.inputHistory,\n            solutionDisplayValue: '',\n          };\n    }\n    else if (operation === \"%\") {\n        return {\n            ...evaluateSolution(oldState.inputHistory),\n            inputHistory: 0,\n            lastOperation: oldState.lastOperation + oldState.inputHistory,\n            solutionDisplayValue: '',\n          };\n    }\n    else if (operation === \"√\") {\n        return {\n            ...evaluateSolution(oldState.inputHistory),\n            inputHistory: 0,\n            lastOperation: oldState.lastOperation + oldState.inputHistory,\n            solutionDisplayValue: '',\n          };\n    } \n    else if (operation === \"Exp\") {\n        return {\n            ...evaluateSolution(oldState.inputHistory),\n            inputHistory: 0,\n            lastOperation: oldState.lastOperation + oldState.inputHistory,\n            solutionDisplayValue: '',\n          };\n    } \n    else if (operation === \"x\") {\n        return {\n            ...evaluateSolution(oldState.inputHistory),\n            inputHistory: 0,\n            lastOperation: oldState.lastOperation + oldState.inputHistory,\n            solutionDisplayValue: '',\n          };\n    } \n    else if (operation === \"÷\") {\n        return {\n            ...evaluateSolution(oldState.inputHistory),\n            inputHistory: 0,\n            lastOperation: oldState.lastOperation + oldState.inputHistory,\n            solutionDisplayValue: '',\n          };\n    } \n    \n    \n}\n\nexport default function SolutionReducer(state = initialState, action) {\n    var newState\n    switch (action.type) {\n        case DIGIT_PRESSED:\n            newState = JSON.parse(JSON.stringify(state));\n            newState = parseNewDigit(newState, action.event)\n            return newState;\n        case OPERATION_PRESSED:\n            newState = JSON.parse(JSON.stringify(state));\n            newState = parseNewOperation(newState,action.event);\n            return newState;\n        case CLEAR:\n            return initialState;\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}